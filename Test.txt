import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.project.Project
import com.atlassian.jira.security.roles.ProjectRoleManager
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.security.groups.GroupManager

// === Konfiguration ===
def categoryRegex = ~/^.+\/\s*KM\d+$/
def usernameDisplayRegex = ~/^.*\(HZD\)$/
def excludeGroup = "jira-administrators"

def projectManager = ComponentAccessor.projectManager
def projectRoleManager = ComponentAccessor.getComponent(ProjectRoleManager)
def groupManager = ComponentAccessor.groupManager
def excludedUsernames = groupManager.getUsersInGroup(excludeGroup)*.username as Set

// === Datenstruktur für Benutzer und deren Kategorien ===
Map<String, Set<String>> userToCategories = [:].withDefault { new HashSet<>() }
Set<String> allMatchingCategories = new TreeSet<>() // für Tabellen-Spalten, alphabetisch sortiert

// === Projekte durchlaufen ===
projectManager.getProjectObjects().each { Project project ->
    def category = project.projectCategory?.name?.trim()
    if (!category || !(category ==~ categoryRegex)) return

    allMatchingCategories << category

    projectRoleManager.getProjectRoles().each { role ->
        def users = projectRoleManager.getProjectRoleActors(role, project).applicationUsers
        users.each { ApplicationUser user ->
            if (!user.active) return
            if (user.username in excludedUsernames) return
            if (!(user.displayName ==~ usernameDisplayRegex)) return

            userToCategories[user.displayName] << category
        }
    }
}

// === Tabelle erzeugen ===
StringBuilder output = new StringBuilder()
output << "<table border='1' cellpadding='5' cellspacing='0'>"
output << "<tr><th>Benutzer</th>"

allMatchingCategories.each { category ->
    output << "<th>${category}</th>"
}
output << "</tr>"

userToCategories.keySet().sort().each { user ->
    output << "<tr><td>${user}</td>"
    allMatchingCategories.each { category ->
        output << "<td style='text-align:center'>"
        output << (category in userToCategories[user] ? "✔️" : "")
        output << "</td>"
    }
    output << "</tr>"
}
output << "</table><br><br>"

output << "<b>Gesamtzahl eindeutiger Benutzer:</b> ${userToCategories.keySet().size()}"
return output.toString()
