import com.atlassian.sal.api.component.ComponentLocator
import com.atlassian.audit.api.AuditService
import com.atlassian.audit.api.AuditRecord
import com.atlassian.audit.api.AuditQuery
import com.atlassian.audit.api.AuditRecordFilter
import com.atlassian.audit.api.AuditCategory

// AuditService holen
def auditService = ComponentLocator.getComponent(AuditService)

// Suchzeitraum (z.B. letzte 90 Tage)
def now = new Date()
def startDate = now - 90

// AuditQuery bauen
def query = AuditQuery.builder()
    .fromDate(startDate)
    .toDate(now)
    .maxResults(1000) // Optional: Limit auf Anzahl der Einträge
    .build()

// Suche ausführen
def result = auditService.getRecords(query)

// Ergebnis filtern nach "Benutzer deaktiviert"
def matches = result.records.findAll { AuditRecord record ->
    record.summary?.toLowerCase()?.contains("user deactivated") ||
    record.summary?.toLowerCase()?.contains("benutzer deaktiviert")
}

// Ausgabe
return matches.collect { record ->
    [
        Zeitpunkt: record.created,
        Aktion: record.summary,
        Kategorie: record.category?.name,
        Beteiligte: record.affectedObjects?.collect { it.name }?.join(', ')
    ]
}
