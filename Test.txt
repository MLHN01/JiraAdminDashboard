
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.security.roles.ProjectRoleManager

def categoryRegex    = ~/^.+\/\s*KM\d+$/
def usernameRegex    = ~/^.*\(HZD\)$/
def excludeGroup     = "jira-administrators"

def pm  = ComponentAccessor.projectManager
def prm = ComponentAccessor.getComponent(ProjectRoleManager)
def gm  = ComponentAccessor.groupManager

def excluded = gm.getUsersInGroup(excludeGroup)*.username as Set
def allHzd   = [] as Set
Map<String, Set<String>> userToKm = new HashMap<String, Set<String>>() 

pm.getProjectObjects().each { proj ->
    def cat = proj.projectCategory?.name?.trim()
    if (!(cat ==~ categoryRegex)) return

    def m = (cat =~ /KM\d+/)
    if (!m) return
    def km = m[0]

    prm.getProjectRoles().each { role ->
        prm.getProjectRoleActors(role, proj).applicationUsers.each { u ->
            if (!u.active || u.username in excluded || !(u.displayName ==~ usernameRegex)) return

            allHzd << u.displayName
            if (!userToKm.containsKey(u.displayName)) {
                userToKm[u.displayName] = new HashSet<String>()
            }
            userToKm[u.displayName].add(km)
        }
    }
}

def out = new StringBuilder()
out << "<b>Gesamtzahl eindeutiger HZD-Benutzer:</b> ${allHzd.size()}<br><br>"
out << "<table border='1'><tr><th>Benutzer</th><th>KM-Gruppe</th></tr>"

allHzd.sort().each { user ->
    def groups = userToKm[user]
    if (groups) {
        groups.sort().each { g ->
            out << "<tr><td>${user}</td><td>${g}</td></tr>"
        }
    } else {
        out << "<tr><td>${user}</td><td></td></tr>"
    }
}

out << "</table>"
return out.toString()
