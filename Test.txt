import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.project.Project
import com.atlassian.jira.security.roles.ProjectRoleManager
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.security.groups.GroupManager

// === Konfiguration ===
def categoryRegex = ~/^.+\/\s*KM\d+$/
def usernameDisplayRegex = ~/^.*\(HZD\)$/
def excludeGroup = "jira-administrators"

def projectManager = ComponentAccessor.projectManager
def projectRoleManager = ComponentAccessor.getComponent(ProjectRoleManager)
def groupManager = ComponentAccessor.groupManager
def excludedUsernames = groupManager.getUsersInGroup(excludeGroup)*.username as Set

Set<String> uniqueUsers = [] as Set
StringBuilder output = new StringBuilder()

// === Tabelle vorbereiten ===
output << "<b>Zuordnung von Benutzern zu KM-Gruppen:</b><br><br>"
output << "<table border='1' cellpadding='5' cellspacing='0'>"
output << "<tr><th>Benutzer</th><th>KM-Gruppe</th></tr>"

// === Projekte durchlaufen ===
projectManager.getProjectObjects().each { Project project ->
    def category = project.projectCategory?.name?.trim()
    if (!category || !(category ==~ categoryRegex)) return

    projectRoleManager.getProjectRoles().each { role ->
        def users = projectRoleManager.getProjectRoleActors(role, project).applicationUsers
        users.each { ApplicationUser user ->
            if (!user.active) return
            if (user.username in excludedUsernames) return
            if (!(user.displayName ==~ usernameDisplayRegex)) return

            uniqueUsers << user.displayName
            output << "<tr><td>${user.displayName}</td><td>${category}</td></tr>"
        }
    }
}

output << "</table><br><br>"
output.insert(0, "<b>Gesamtzahl eindeutiger Benutzer mit (HZD):</b> ${uniqueUsers.size()}<br><br>")

return output.toString()
