import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.project.Project
import com.atlassian.jira.security.roles.ProjectRoleManager
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.security.groups.GroupManager

// === Konfiguration ===
def categoryRegex        = ~/^.+\/\s*KM\d+$/     // z. B. "Abteilung7/ KM12345"
def usernameDisplayRegex = ~/^.*\(HZD\)$/        // nur "(HZD)"-Users
def excludeGroup         = "jira-administrators" // Systemadmins ausschließen

// === Jira-Manager laden ===
def projectManager      = ComponentAccessor.projectManager
def projectRoleManager  = ComponentAccessor.getComponent(ProjectRoleManager)
def groupManager        = ComponentAccessor.groupManager

// === Setup ===
// Alle User, die ausgeschlossen werden sollen
def excludedUsernames = groupManager.getUsersInGroup(excludeGroup)*.username as Set

// Sammlung aller eindeutigen HZD-User
def allHzdUsers = new HashSet<String>()
// Map: User → Set der KM-Gruppen, in denen er ist
def userToKmGroups = [:].withDefault { new HashSet<String>() }

// === Daten sammeln ===
projectManager.getProjectObjects().each { Project project ->
    def rawCat = project.projectCategory?.name?.trim()
    if (!rawCat || !(rawCat ==~ categoryRegex)) return

    // Nur den Teil "KM12345" extrahieren
    def matcher = (rawCat =~ /KM\d+/)
    if (!matcher) return
    def kmName = matcher[0]

    projectRoleManager.getProjectRoles().each { role ->
        projectRoleManager
            .getProjectRoleActors(role, project)
            .applicationUsers
            .each { ApplicationUser user ->
                if (!user.active) return
                if (user.username in excludedUsernames) return
                if (!(user.displayName ==~ usernameDisplayRegex)) return

                allHzdUsers.add(user.displayName)
                userToKmGroups[user.displayName].add(kmName)
            }
    }
}

// === Ausgabe bauen ===
def out = new StringBuilder()

// 1) Gesamtsumme
out << "<b>Gesamtzahl eindeutiger HZD-Benutzer:</b> ${allHzdUsers.size()}<br><br>"

// 2) Einfache 2-Spalten-Tabelle
out << "<table border='1' cellpadding='5' cellspacing='0'>"
out << "<tr><th>Benutzer</th><th>KM-Gruppe</th></tr>"

allHzdUsers.sort().each { user ->
    def groups = userToKmGroups[user]
    if (groups && !groups.isEmpty()) {
        groups.sort().each { grp ->
            out << "<tr><td>${user}</td><td>${grp}</td></tr>"
        }
    } else {
        out << "<tr><td>${user}</td><td></td></tr>"
    }
}

out << "</table>"
return out.toString()
