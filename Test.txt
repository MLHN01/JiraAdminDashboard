
import com.atlassian.audit.api.AuditSearchService
import com.atlassian.audit.api.AuditQuery
import com.atlassian.audit.api.util.pagination.Page
import com.atlassian.audit.api.util.pagination.PageRequest
import com.atlassian.audit.api.cursor.AuditEntityCursor
import com.atlassian.audit.entity.AuditEntity

import java.time.ZoneId

Date getLastDeactivationDate(String username) {
    // AuditSearchService 체ber OSGi abfragen
    def auditSearchService = ComponentAccessor.getOSGiComponentInstanceOfType(AuditSearchService)

    // AuditQuery erstellen: wir suchen gezielt nach "User deactivated"
    def auditQuery = AuditQuery.builder()
            .actions("User deactivated")
            .build()

    // Hier sammeln wir alle passenden Audit-Entities ein
    List<AuditEntity> allMatches = []

    // Offset-basierte Pagination
    int offset = 0
    int limit = 50
    int scanLimit = 1_000_000  // max. Anzahl Entities, die wir insgesamt scannen (anpassbar)

    while (true) {
        def pageRequest = new PageRequest.Builder<AuditEntityCursor>()
                .offset(offset)
                .limit(limit)
                .build()

        // Audit-Entities auslesen
        Page<AuditEntity, AuditEntityCursor> page = auditSearchService.findBy(auditQuery, pageRequest, scanLimit)
        if (!page || !page.results) {
            // Nichts (mehr) gefunden, Schleife beenden
            break
        }

        // Aus den gefundenen Entities nur jene behalten, die den gesuchten user betreffen
        def matchingThisPage = page.results.findAll { entity ->
            entity.affectedObjects.any { resource ->
                resource.name == username
            }
        }
        allMatches.addAll(matchingThisPage)

        // Pr체fen, ob es noch eine Folgeseite gibt
        def nextPageRequest = page.getNextPageRequest()
        if (!nextPageRequest) {
            // Keine weitere Seite vorhanden
            break
        }

        // N채chste Seite anhand offset
        offset += limit
    }

    if (!allMatches) {
        // Keine Deaktivierungs-Events f체r diesen User gefunden
        return null
    }

    // Sortiere absteigend nach Erstellungszeit
    allMatches.sort { a, b ->
        b.created.toEpochMilli() <=> a.created.toEpochMilli()
    }

    // Der erste Eintrag in absteigender Reihenfolge ist die letzte Deaktivierung
    def latest = allMatches.first()
    return Date.from(latest.created.atZone(ZoneId.systemDefault()).toInstant())
}
