Test
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.audit.api.AuditService
import com.atlassian.audit.entity.AuditRecord
import java.time.ZoneId

def crowdService = ComponentAccessor.crowdService
def userService = ComponentAccessor.getComponent(com.atlassian.jira.bc.user.search.UserSearchService)
def auditService = ComponentAccessor.getOSGiComponentInstanceOfType(AuditService)

def dateLimit = (new Date()) - 90 // z.B. 90 Tage Limit für Inaktivität
def result = ""

def userSearchParamsBuilder = new com.atlassian.jira.bc.user.search.UserSearchParams.Builder()
        .allowEmptyQuery(true)
        .ignorePermissionCheck(true)
        .build()

def allActiveUsers = userService.findUsers("", userSearchParamsBuilder)

allActiveUsers.each { appuser ->
    def user = crowdService.getUserWithAttributes(appuser.getName())
    String lastLoginMillis = user.getValue('login.lastLoginMillis')

    if (lastLoginMillis?.isNumber()) {
        Date lastLoginDate = new Date(Long.parseLong(lastLoginMillis))
        if (lastLoginDate.before(dateLimit)) {
            result += "Inactive user: ${appuser.getDisplayName()} - last login: ${lastLoginDate.format("dd.MM.yyyy HH:mm")}<br>"
        }
    }

    // Letzte Deaktivierung per AuditService holen
    def deactivationDate = null
    def records = auditService.getRecords(0, 1000) // letzte 1000 Audit Records (Passe ggf. an, wenn viele Einträge vorhanden sind!)
            .findAll { record ->
                record.action == "User deactivated" &&
                record.affectedObjects.any { it.name == appuser.name }
            }
            .sort { -it.created.toEpochMilli() }

    if (records) {
        AuditRecord lastDeactivation = records.first()
        deactivationDate = Date.from(lastDeactivation.created.atZone(ZoneId.systemDefault()).toInstant())
        result += "User ${appuser.getDisplayName()} was last deactivated on: ${deactivationDate.format("dd.MM.yyyy HH:mm")}<br>"
    }
}

return result